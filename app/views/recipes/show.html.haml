.recipe.max-w-full.bg-white.p-4.my-4.rounded.shadow
  .recipe-upper.flex
    .recipe-left.w-1by2.p-2
      %h1.text-center.text-orange= @recipe.title
      #average-rating
      %br
      %p
        Posted by:
        = mail_to @recipe.user.email
      %p
        - if @recipe.forked?
          Forked from:
          = link_to @original_recipe.title , recipe_path(@original_recipe)
      %p
        - if @recipe.forked_recipes_ids.any?
          = "Forks: #{@recipe.forked_recipes_ids.count}"

      %h3 Description
      %p= @recipe.description

    .recipe-right.w-1by2.p-2
      .recipe-buttons.flex.items-start.justify-end.mb-4
        -if user_signed_in? && policy(@recipe).edit?
          = link_to edit_recipe_path, class: 'btn' do
            .fas.fa-edit
            Edit Recipe


        -if user_signed_in?
          = link_to forks_path(id: @recipe.id), method: :post , class: 'btn' do
            .fas.fa-code-branch
            Fork

          - if current_user.collection.recipes.include?(@recipe)
            .disabled-btn= "In Collection"
          - else
            = link_to collections_path(id:@recipe.id), method: :post, class: 'btn' do
              .fas.fa-plus
              Add to Collection

      .self-end
        = image_tag rails_blob_path(@recipe.image), class: 'w-100%' unless @recipe.image.attachment.nil?

  .recipe-down.p-2
    .recipe-text.border-b.pb-2.mb-2
      %h3 Ingredients
      %p= @recipe.ingredients
      %h3 Directions
      %p= @recipe.directions

    .rating-div.border-b.pb-2.mb-2
      - unless @recipe.rated_by?(current_user)
        %h3
          Rate:
          %span#rating
            - 5.times.reverse_each do |i|
              = content_tag(:span, "&#9734".html_safe, data: {rating: "#{i + 1}"}, id: "star-#{i + 1}", class: 'star')

    .comments-div
      - count = @recipe.comments.count
      - if  count == 1
        %h3= "#{count} Comment"
      - elsif count > 1
        %h3= "#{count} Comments"

      - @recipe.comments.each do |comment|
        .bg-white.p-4.m-2.rounded.overflow-hidden.shadow-md.w-1by2
          %p= comment.body
          .flex.justify-end.text-sm
            .mr-2
              Commented by:
              = mail_to comment.user.email

    .comments-form
      - if user_signed_in?
        = form_with(model: [ @recipe, @recipe.comments.build ], local: true) do |form|
          .flex.items-end
            = form.text_area :body, placeholder: "Comment here"
            = form.submit 'Comment', class: 'btn'

:javascript
    const showRatingFunction = (rating, message) => {
      let dispalyRatingElement = document.getElementById('average-rating')
      if (rating == 0) {
        dispalyRatingElement.style.display = 'none';
        return false;
      } else {
        dispalyRatingElement.innerHTML = ''
        dispalyRatingElement.style.display = '';
      }

      // We want to display 5 stars in total
      let label = document.createElement('span')
      label.innerText = "Average Rating:"
      dispalyRatingElement.appendChild(label)
      // Display black stars based on the current rating
      rating.times( () => {
        let content = document.createElement('span')
        content.innerHTML = "&#9733"
        dispalyRatingElement.appendChild(content)
      } );
      // Display white star based on 5 - current rating
      let whiteStarCount = 5 - rating
      whiteStarCount.times( () => {
        let content = document.createElement('span')
        content.innerHTML = "&#9734"
        dispalyRatingElement.appendChild(content)
      } );

      let usersMessage = document.createElement('span')

      usersMessage.innerText = message
      dispalyRatingElement.appendChild(usersMessage)

      return false;
    }

    document.addEventListener('turbolinks:load', () => {
      let averageRating = #{@recipe.calc_average_rating}
      let averageRatingMessage = " By #{@recipe.ratings.count} #{'user'.pluralize(@recipe.ratings.count)}."
      let ratingStars = document.querySelectorAll('span .star')
      let noticeDiv = document.querySelector('.notice')
      let alertDiv = document.querySelector('.alert')
      let ratingDiv = document.querySelector('#rating')

      showRatingFunction(averageRating, averageRatingMessage)

      ratingStars.forEach((star)=>{
        star.addEventListener('click',(event)=>{
          event.preventDefault()
          let value = star.dataset.rating
          let body = JSON.stringify({rating: value })
          fetch("#{recipe_ratings_path(@recipe)}", {
            method: 'POST',
            body: body,
            credentials: 'include',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
              'X-CSRF-Token': Rails.csrfToken()
          }}).then(function(response) {
            return response.json();
          }).then(function(data) {
            noticeDiv.innerHTML = data.message
            let displayMessage = data.display_message
            let averageRating = data.average_rating
            showRatingFunction(averageRating, displayMessage)
            ratingDiv.style.display = 'none'
            console.log(data)
          }).catch((error) => {
            alertDiv.innerHTML = error
            console.log(error)
          });
        })
      })
    })
